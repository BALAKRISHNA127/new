SETUP

1.git config --global user.name “[firstname lastname]”
    set a name that is identifiable for credit when review version history

2.git config --global user.email “[valid-email]”
    set an email address that will be associated with each history marker

3.git config --global color.ui auto
    set automatic command line coloring for Git for easy reviewing


SETUP & INIT

4.git init
    initialize an existing directory as a Git repository

5.git clone [url]
    retrieve an entire repository from a hosted location via URL


STAGE & SNAPSHOT
    Working with snapshots and the Git staging area

6.git status
    show modified files in working directory, staged for your next commit

7.git add [file]
    add a file as it looks now to your next commit (stage)

8.git reset [file]
    unstage a file while retaining the changes in working directory

9.git diff
    diff of what is changed but not staged

10.git diff --staged
    diff of what is staged but not yet committed

11.git commit -m “[descriptive message]”
    commit your staged content as a new commit snapshot


INSPECT & COMPARE
    Examining logs, diffs and object information

12.git log
    show the commit history for the currently active branch

13.git log branchB..branchA
    show the commits on branchA that are not on branchB

14.git log --follow [file]
    show the commits that changed file, even across renames

15.git diff branchB...branchA
    show the diff of what is in branchA that is not in branchB

16.git show [SHA]
    show any object in Git in human-readable format


TRACKING PATH CHANGES
    Versioning file removes and path changes

17.git rm [file]
    delete the file from project and stage the removal for commit

18.git mv [existing-path] [new-path]
    change an existing file path and stage the move

19.git log --stat -M
    show all commit logs with indication of any paths that moved


SHARE & UPDATE
    Retrieving updates from another repository and updating local repos

20.git remote add [alias] [url]
    add a git URL as an alias

21.git fetch [alias]
    fetch down all the branches from that Git remote

22.git merge [alias]/[branch]
    merge a remote branch into your current branch to bring it up to date

23.git push [alias] [branch]
    Transmit local branch commits to the remote repository branch

24.git pull
    fetch and merge any commits from the tracking remote branch


REWRITE HISTORY
    Rewriting branches, updating commits and clearing history

25.git rebase [branch]
    apply any commits of current branch ahead of specified one

26.git reset --hard [commit]
    clear staging area, rewrite working tree from specified commit


TEMPORARY COMMITS
    Temporarily store modified, tracked files in order to change branches

27.git stash
    Save modified and staged changes

28.git stash list
    list stack-order of stashed file changes

29.git stash pop
    write working from top of stash stack
    
30.git stash drop
    discard the changes from top of stash stack